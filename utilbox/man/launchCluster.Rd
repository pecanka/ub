% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parallel.R
\name{launchCluster}
\alias{launchCluster}
\alias{endCluster}
\title{Start a parallel computation cluster}
\usage{
launchCluster(
  n_cores = parallel::detectCores() - 1,
  max_n_cores = parallel::detectCores() - 1,
  launch = TRUE,
  progress_bar = TRUE,
  pb_max,
  pb_print_every_n = 1,
  pb_width = min(options()$width, 100),
  pb_initial = 0,
  pb_show = TRUE,
  pb_hint = TRUE,
  announce = TRUE,
  pb_con = stdout(),
  attach_on_exit = TRUE,
  envir = parent.frame()
)

endCluster(envir = parent.frame(), warn = TRUE)
}
\description{
\code{launchCluster()} starts a parallel cluster (unless \code{launch=FALSE}). While doing so,
it also creates several objects in the parent functions calling frame, namely \code{..cl..}
(the actual cluster), and \code{..cl_stop..} (a function for stopping of the cluster),
and \code{..pb..} (progress bar), \code{.pb.update()} (a function for updating the progress bar)
and \code{..pb_stop..()} (a function for stopping the progress bar).
A call to \code{launchCluster()} also executes \code{on.exit()} in the the parent functions
calling frame, which registers the cluster stopping function (i.e., \code{..cl_stop..()})
to be called when the parent function exits. Use \code{launch=FALSE} with \code{progress_bar=TRUE}
to only initialize the progress bar without starting a new cluster (e.g., when an
existing cluster is to be used instead of a new one).
}
\details{
\code{endCluster()} stops the parallel cluster and finishes the progress bar (by executing
\code{..cl_stop..()} and \code{..pb_stop..()} in its parent frame.

Info: parallel is the 'official' parallelization backend for R (basically).
doParallel is a package meant for use with foreach. Foreach lets you use a particular
type of for-loop, called 'foreach', that looks like:
foreach(i=listOfThings) \%do\% {thing with i}.
\code{foreach} allows this to be parallelized, using \%dopar\%:
foreach(i=listOfThings) \%dopar\% {thing with i}.

\emph{How} you parallelize with \verb{\%dopar\%} depends on which backend you use.
doParallel is one such backend - it tells foreach to use parallel. There are others,
like doFuture (another parallel backend, using promises), doMPI (another parallel backend,
using message passing interface; meant for high performance clusters), doRedis (another
backend, using a Redis server/daemon to spin up workers), doSnow (another backend, using
the SNOW package for creating parallel processes).

TLDR: parallel is the core parallelization package, now shipped with R as part of its core
libraries. doParallel is a package addon to foreach that tells foreach to use a cluster
defined by the parallel package.

Using parallel requires making the cluster (makeCluster) and to export the object list
(clusterExport) and packages (clusterEvalQ).

From https://www.reddit.com/r/rstats/comments/bkwr36/what_is_the_difference_between_the_doparallel_and/
}
\examples{
n = 100
opts_snow = launchCluster(pb_max=100)
 
v = foreach(i=1:n, .combine=rbind, .options.snow = opts_snow) \%dopar\% {
  mean(1:1000000)
}

# stop the cluster and progress_bar
endCluster()
# or alternatively call the two functions directly:
# ..pb_stop..()
# ..cl_stop..()

}
