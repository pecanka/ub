% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions.R
\name{function_find_dependencies}
\alias{function_find_dependencies}
\title{`
Find dependencies of a function}
\usage{
function_find_dependencies(
  fun,
  dep_envir,
  fun_envir = parent.frame(),
  get_status = TRUE
)
}
\description{
\code{function_find_dependencies()} searches the source code of a
function (supplied either directly or by name as string via \code{fun})
and identifies invocations of functions that are found in the
specified environment or package (supplied via \code{dep_envir}). When
supplied by name, the environment in \code{dep_envir} is searched for
a function of matching name. The function name can be supplied
together with a package using the double colon notation (e.g.,
'base::mean\verb{), which is then used to set }fun_envir\verb{(unless it has been supplied. When the argument}dep_envir\verb{was not specified, the environment in}fun_envir` is used.
}
\examples{
# Function supplied directly or by name, `fun_envir` is implied (i.e.,
# set to `environment(base::sample)`), `dep_envir` missing so taken 
# the same as `fun_envir`. Thus it looks for dependencies of `sample` 
# in the environment "base".
function_find_dependencies(base::sample)
function_find_dependencies('base::sample') 

# function supplied directly, `fun_envir` is implied (i.e., set to
# `environment(base::sample)`), `dep_envir` is specified explicitly.
function_find_dependencies(base::sample, 'stats')
function_find_dependencies('base::sample', 'stats')
function_find_dependencies('sample', 'stats', 'base')

# An example of a missing function (xxxx)
g = function() print('hi')
ff = function() { x = xxxx(); a = sin(1); g() }
function_find_dependencies(ff)

}
