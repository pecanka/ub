% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/headtail.R
\name{h1}
\alias{h1}
\alias{h1.vector}
\alias{h1.data.frame}
\alias{h1.default}
\alias{h1.numeric}
\alias{h1.character}
\alias{h1.logical}
\alias{h1.factor}
\alias{h1.complex}
\alias{h1.list}
\alias{h1.matrix}
\alias{h1.table}
\alias{t1}
\alias{t1.vector}
\alias{t1.data.frame}
\alias{t1.default}
\alias{t1.numeric}
\alias{t1.character}
\alias{t1.logical}
\alias{t1.factor}
\alias{t1.complex}
\alias{t1.list}
\alias{t1.matrix}
\alias{t1.table}
\title{First and last elements}
\usage{
h1(x, ...)

\method{h1}{vector}(x, n = 1, ..., stop_on_greedy = FALSE)

\method{h1}{data.frame}(x, n = 1, ..., stop_on_greedy = FALSE)

\method{h1}{default}(x, n = 1, ..., stop_on_greedy = FALSE)

\method{h1}{numeric}(x, n = 1, ..., stop_on_greedy = FALSE)

\method{h1}{character}(x, n = 1, ..., stop_on_greedy = FALSE)

\method{h1}{logical}(x, n = 1, ..., stop_on_greedy = FALSE)

\method{h1}{factor}(x, n = 1, ..., stop_on_greedy = FALSE)

\method{h1}{complex}(x, n = 1, ..., stop_on_greedy = FALSE)

\method{h1}{list}(x, n = 1, ..., stop_on_greedy = FALSE)

\method{h1}{matrix}(x, n = 1, ..., stop_on_greedy = FALSE)

\method{h1}{table}(x, n = 1, ..., stop_on_greedy = FALSE)

t1(x, ...)

\method{t1}{vector}(x, n = 1, ..., stop_on_greedy = FALSE)

\method{t1}{data.frame}(x, n = 1, ..., stop_on_greedy = FALSE)

\method{t1}{default}(x, n = 1, ..., stop_on_greedy = FALSE)

\method{t1}{numeric}(x, n = 1, ..., stop_on_greedy = FALSE)

\method{t1}{character}(x, n = 1, ..., stop_on_greedy = FALSE)

\method{t1}{logical}(x, n = 1, ..., stop_on_greedy = FALSE)

\method{t1}{factor}(x, n = 1, ..., stop_on_greedy = FALSE)

\method{t1}{complex}(x, n = 1, ..., stop_on_greedy = FALSE)

\method{t1}{list}(x, n = 1, ..., stop_on_greedy = FALSE)

\method{t1}{matrix}(x, n = 1, ..., stop_on_greedy = FALSE)

\method{t1}{table}(x, n = 1, ..., stop_on_greedy = FALSE)
}
\description{
Get the first or last \code{n} elements of an object.

\code{utils::head()} and \code{utils::tail()} with two main
differences. First, \code{h1()} and \code{t1()} have different default number
of elements (\code{n=1}). Second, if the requested number of elements
(\code{n}) is larger than the length of the input (\code{x}), the elements of
\code{x} are recycled, though only for \code{n} positive. For non-positive \code{n},
and for classes different from those for which the methods are
defined, the functions behave exactly like their counterparts from
\code{utils}.
}
\examples{
# head
h1(LETTER[1:7])
h1(LETTER[1:7], 10)
h1(data.frame(id=1:3, name=c('John','Jane','Paul')))
h1(data.frame(id=1:3, name=c('John','Jane','Paul')), 5)

# tail
t1(LETTER[1:7])
t1(LETTER[1:7], 10)
t1(data.frame(id=1:3, name=c('John','Jane','Paul')))

}
\seealso{
Other sequence-related functions provided by utilbox: 
\code{\link{as_factor}()},
\code{\link{every_nth}()},
\code{\link{filter_by_position}},
\code{\link{filter_by}},
\code{\link{groups_of_unique}()},
\code{\link{insert}()},
\code{\link{is_between}()},
\code{\link{is_run}},
\code{\link{last_element}()},
\code{\link{rep2}()},
\code{\link{replace2}()},
\code{\link{replace3}()},
\code{\link{seq2}()},
\code{\link{seq_around}()},
\code{\link{sizechecks}},
\code{\link{split_into_groups}()},
\code{\link{what_bag}()}
}
\concept{sequence-related functions provided by utilbox}
