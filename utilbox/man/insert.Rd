% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/insert.R
\name{insert}
\alias{insert}
\alias{insert.list}
\alias{insert.default}
\alias{insert_recurse.list}
\alias{insert1}
\alias{insert1.list}
\title{Insert element into sequence}
\usage{
insert(...)

\method{insert}{list}(x, what, at, count = 1, replace_old = FALSE, new_old = FALSE)

\method{insert}{default}(x, what, ...)

insert_recurse.list(x, what, at, count = 1, replace = FALSE)

insert1(...)

\method{insert1}{list}(x, what, at, count = 1, replace = FALSE)
}
\description{
Insert the elements in \code{what} inside \code{x} at the positions given in
\code{at}. The positions in \code{at} are always taken relative to the original
values in \code{x}. Each element is inserted \code{count} times, where \code{count}
is expected to be a vector of the same length as \code{what} and is
recycled when shorter. The length of \code{at} must match the length of
\code{what}.

Since the insertions positions are always taken relative to the
original positions in \code{x}, the order in which the insertions are
specified (via \code{what} and \code{at}) is irrelevant unless the values would
lead to overwriting of each other (only allowed when
\code{allow_overwriting=TRUE}).

Primarily, \code{x} is expected to be of class \code{list}, otherwise it is
converted to one. \code{what} can be either a vector, or a list. If it is
a list, each element in it can have multiple elements, which are then
inserted at the corresponding index in \code{at} sequentially and each
once or multiple times (depending on the value in the corresponding
element in \code{count}).

\code{replace_old} determines whether the elements in \code{x} at positions
\code{at} are retained (i.e. shifted down in the output, when
\code{replace_old=FALSE}), or dropped (when \code{replace_old=TRUE}).

When \code{new_old=TRUE} the indexes of the original (\"old\") and the
added (\"new\") elements in the returned object are attached as
attributes \"old\" and \"new\".
}
\examples{

# insert additively (once)
insert(as.list(1:10), list(99,999,9999), c(2,5,7))
insert(as.list(1:10), list(list(99),list(999),list(9999)), c(2,5,7))   # no difference

# non-list inputs: preserves class
insert(1:10, c(99,999,9999), c(2,5,7))
insert(1:10, c(99,999,9999), c(2,5,7), count=2)
insert(1:10, list(99,999,9999), c(2,5,7), count=2)
insert(1:10, list(list(99),list(999),9999), c(2,5,7), count=2)

# but that is not always possible
\dontrun{
insert(1:10, list('a',999,9999), c(2,5,7), count=2)
}

# a non-sorted at is not a problem
insert(1:5, c(777,999), at=c(2,1))

# nor are multiple insertions at the same spot
insert(1:5, c(777,999), at=c(2,2))

# insert additively (once or multiple times)
insert(as.list(1:10), list(99,999,9999), c(2,5,7))
insert(as.list(1:10), list(99,999,9999), c(2,5,7), count=1:3)
insert(as.list(1:10), list(98:99,999,9999), c(2,5,7), count=3)
insert(as.list(1:10), list(as.list(98:99),999,9999), c(2,5,7), count=3)  # notice the difference from the previous one

# insert replacively
insert(as.list(1:10), list(99,999,9999), c(2,5,7), replace_old=TRUE)

# replacive addition makes more sence with multiple additions
insert(as.list(1:10), list(98:99,999,9999), c(2,5,7), count=3)
insert(as.list(1:10), list(as.list(98:99),999,9999), c(2,5,7), count=3)

# emulating the beharior of 'each' in rep
insert(as.list(1:10), list(as.list(rep(c(98,99),e=3)),999,9999), c(2,5,7), count=c(1,3,3))
# but that's probably easier done directly
insert(as.list(1:10), list(98,99,999,9999), c(2,2,5,7), count=c(3,3,3,3))

# now with non-numeric input
what = list(list(sin,cos),999,9999)
insert(as.list(1:10), what, c(2,5,7), count=c(1,2,2))

# with repetition
what = list(rep_list(list(sin,cos), e=3),999,9999)
insert(as.list(1:10), what, c(2,5,7), count=c(1,3,3))

# but the insertion can be done with lists
insert(as.list(1:3), list(sin), at=1)
insert(as.list(1:10), list(list(sin,cos)), at=1)
insert(as.list(1:10), list(list(list(sin,cos))), at=1)


x = as.list(do.call(paste0, rep_list(list(LETTERS[1:15]),10)))
what = c('a','b','c'); at = c(2, 3, 7)
insert(x, what, at=at, count=10)

}
\seealso{
Other sequence-related functions provided by utilbox: 
\code{\link{every_kth}()},
\code{\link{filter_by_position}},
\code{\link{filter_by}},
\code{\link{groups_of_unique}()},
\code{\link{h1}()},
\code{\link{is_between}()},
\code{\link{is_run}},
\code{\link{last_element}()},
\code{\link{rep2}()},
\code{\link{replace2}()},
\code{\link{replace3}()},
\code{\link{seq2}()},
\code{\link{seq_around}()},
\code{\link{sizechecks}},
\code{\link{split_into_groups}()},
\code{\link{to_factor}()},
\code{\link{what_bag}()}
}
\concept{sequence-related functions provided by utilbox}
