% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/matching.R
\name{patternize}
\alias{patternize}
\alias{str_patternize}
\alias{str_unpatternize}
\alias{unpatternize}
\alias{str_escape}
\alias{str_unescape}
\title{Patternize a string}
\usage{
str_patternize(name, special = c("+", ".", "(", ")", "$", "?", "\\\\"))

patternize(name, special = c("+", ".", "(", ")", "$", "?", "\\\\"))

str_unpatternize(pattern)

unpatternize(pattern)

str_escape(x, specials = NULL, specials0 = c(`\\\\n` = "\\\\\\\\n"))

str_unescape(x, specials = NULL, specials0 = c(`\\\\n` = "\\\\\\\\n"))
}
\description{
\code{str_patternize()} wraps special characters in string name
(possibly a vector) by brackets so that it can be matched within
regular expression matching (the case of "\\" has to be treated
differently). Useful for instance when working with file names.

\code{str_unpatternize()} does the reverse of \code{patternize()}.

\code{str_escape()} escapes special characters in a string. By default,
it escapes only the new line symbol (e.g. replaces \verb{\\\\n} with a
\verb{\\\\\\\\n}).
}
\examples{
regexpr('notes.txt', 'notes_txt')>0                # TRUE
regexpr(str_patternize('notes.txt'), 'notes_txt')>0    # FALSE
regexpr(str_patternize('notes.txt'), 'notes.txt')>0    # TRUE

str_escape('\n')

}
\seealso{
Other string-manipulation functions provided by utilbox: 
\code{\link{ascii}()},
\code{\link{collapse}()},
\code{\link{cumpaste0}()},
\code{\link{multi_sub}()},
\code{\link{padding}},
\code{\link{str_diff}()},
\code{\link{str_grab}()},
\code{\link{str_insert}()},
\code{\link{str_is_empty}()},
\code{\link{str_paste_grid}()},
\code{\link{str_pos}()},
\code{\link{str_rev}()},
\code{\link{str_split}()},
\code{\link{str_trim_space}()},
\code{\link{sub_at}()},
\code{\link{toupperfirst}()}
}
\concept{string-manipulation functions provided by utilbox}
