% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/debug.R
\name{kidnap_function}
\alias{kidnap_function}
\alias{kidnap_stop_function}
\alias{restore_stop_function}
\alias{kidnap_warning_function}
\alias{restore_warning_function}
\alias{function_kidnap}
\title{Kidnap the stop and warning functions}
\usage{
kidnap_stop_function(quietly = FALSE)

restore_stop_function(quietly = FALSE)

kidnap_warning_function(quietly = FALSE)

restore_warning_function(quietly = FALSE)

function_kidnap(
  fun_name,
  envir = parent.frame(),
  msg_argument,
  restore_call,
  remodify = TRUE,
  quietly = FALSE
)
}
\description{
\code{kidnap_stop_function()} kidnaps the function \code{base::stop}.
In this context, kidnapping of a function means that the function
is modified so that it asks the user for input before proceeding
with its code. The original code of the kidnapped function is backed
up in the attribute \code{original_function} of the kidnapped function
so that the original function can be restored.
}
\details{
\code{restore_stop_function()} restores the original version of the stop
function.

\code{kidnap_warning_function()} and \code{restore_warning_function()} perform
the same action for the warning functions \code{base::warning} and
\code{base::.signalSimpleWarning}.

\code{function_kidnap()} is the workhorse that does the actual kidnapping,
which modified the function \strong{in place}.
}
