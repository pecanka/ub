% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sorting.R
\name{sort_by_pattern}
\alias{sort_by_pattern}
\alias{sort_by_names}
\alias{reord}
\title{Pattern sort}
\usage{
sort_by_pattern(
  x,
  pattern,
  by_names = FALSE,
  invert = FALSE,
  get_order = FALSE,
  keep_order_in_groups = FALSE,
  allow_empty_names = FALSE,
  ...
)

sort_by_names(x, get_order = FALSE)

reord(x, order)
}
\arguments{
\item{x}{An object to be sorted.}

\item{pattern}{A regular expression pattern (or vector of patterns)
to sort \code{x} by.}

\item{by_names}{Logical. When \code{TRUE} (default for \code{sort_by_names()}),
\code{x} is sorted based on its its \code{names} attribute, otherwise it is sorted
based on its values (default for \code{sort_by_pattern}).}

\item{invert}{Logical. Sets whether the pattern matching is inverted
(in \code{base::grepl}).}

\item{get_order}{Logical. Sets whether the reorder \code{x} (\code{FALSE}) or the
reordering indices (\code{TRUE}) are returned.}

\item{allow_empty_names}{Logical. Sets whether (any) missing names
cause an error (effective only with \code{by_names=TRUE}).

\code{reord} simply reorders an object according to reordering indices supplied
to it via \code{order}.}

\item{order}{The new order of the elements of \code{x}.}

\item{keep_order}{Logical. Determines whether the groups of elements
determined by matching patterns get themselves sorted or whether the
original order of elements is kept within these groups.}
}
\value{
A reordering of \code{x} according to \code{order}.
}
\description{
\code{sort_by_pattern()} sorts the input according to the order given in
pattern(s) (given in \code{pattern}) by matching the names of the input
(i.e. \code{x}) against the pattern(s).

\code{sort_by_names()} sorts the input (\code{x}) according to its \code{names}
attribute by exact matching. For sorting by names via pattern matching
use \code{sort_by_pattern(..., by_names=TRUE)}.
}
\examples{
x = c('jan','jany','jani','jana','dariel','dan','danny')

# put the "d" names up front, sort them and the rest separately
sort_by_pattern(x, 'd')

# put the "d" names up front, leave the order alone
sort_by_pattern(x, 'd')
sort_by_pattern(x, c('d','dar'))
sort_by_pattern(x, c('d','dar','y'))

# similarly to base::order(), we can get the reordering indices
y = sort_by_pattern(x, c('d','nn','dar','y'), invert=TRUE)
ord = sort_by_pattern(x, c('d','nn','dar','y'), invert=TRUE, get_order=TRUE)
identical(y, x[ord])

# without the inversion
y = sort_by_pattern(x, c('d','nn','dar','y'))
ord = sort_by_pattern(x, c('d','nn','dar','y'), get_order=TRUE)
identical(y, x[ord])

# exact sorting by names
z = c('name_last'='Newman', 'name_given'='Richard', 'date_of_death'='2003-02-03', 'date_of_birth'='1933-12-30')
sort_by_names(z)

# pattern-sorting by names
sort_by_pattern(z, c('name_', 'date_'), by_names=TRUE)

}
\seealso{
Other sorting utilities provided by ub: 
\code{\link{sort_df}()},
\code{\link{sort_pval_matrix_cols}()}
}
\concept{sorting utilities provided by ub}
